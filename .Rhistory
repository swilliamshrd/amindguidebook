library(dplyr)
lander <- mutate(shuttle, use=ifelse(use=="auto",1,0), wind=ifelse(wind=="head",1,0))
model <- glm(use ~ wind, data = lander, family = "binomial")
exp(coef(model))
#question 2
model2<- glm(use ~ wind + factor(magn), data = lander, family = "binomial")
exp(coef(model2))
#question 2
alternatemodel2 <-  glm(I(1-use) ~ wind + factor(magn), data = lander, family = "binomial")
alternatemodel2 <-  glm(I(1-use) ~ wind + factor(magn), data = lander, family = "binomial")
exp(coef(alternatemodel2))
lander$alternate_use <- 1-lander$use
alternatemodel2 <-  glm(alternate_use ~ wind + factor(magn), data = lander, family = "binomial")
exp(coef(alternatemodel2))
#question 1
library(MASS)
library(dplyr)
lander <- mutate(shuttle, use=ifelse(use=="auto",1,0), wind=ifelse(wind=="head",1,0))
model <- glm(use ~ wind, data = lander, family = "binomial")
exp(coef(model))
#question 2
model2<- glm(use ~ wind + factor(magn), data = lander, family = "binomial")
exp(coef(model2))
#question 3
lander$alternate_use <- ifelse(lander$use == 1, 0, 1)
alternatemodel2 <-  glm(alternate_use ~ wind + factor(magn), data = lander, family = "binomial")
exp(coef(alternatemodel2))
model2<- glm(use ~ wind + factor(magn), data = lander, family = "binomial")
exp(coef(model2))
#question 3
lander$alternate_use <- ifelse(lander$use == 1, 0, 1)
alternatemodel2 <-  glm(alternate_use ~ wind + factor(magn), data = lander, family = "binomial")
exp(coef(alternatemodel2))
1/exp(coef(model2))
plot(x = lander$wind, y = lander$use)
jitter(plot())
lander
head(lander)
lander$alternate_use <- 1-lander$use
head(lander)
model5 <- glm(alternate_use ~ wind, data = lander, family = "binomial")
model$coefficients
model5$coefficients
model3 <- glm(count ~ factor(spray), data = InsectSprays, family = "poisson")
exp(coef(model3))
1/exp(coef(model3))
model3 <- glm(count ~ factor(spray), data = InsectSprays, family = "poisson")
exp(coef(model3))
1/exp(coef(model3))
#qeustion 6
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knotterm <- (x>0)*(x-0)
xMat <- cbind(1, x, knotterm)
model4 <- lm(y~xMatxMat <- cbind(1, x, splineTerms-1))
sum(coef(model4)[2:3])
install.packages("markdown")
?mtcars
mtcars %>% group_by(factor(am)) %>% summarize(mean(mpg))
mtcars %>% group_by(factor(am)) %>% summarize(mean(mpg))
library(dplyr)
mtcars %>% group_by(factor(am)) %>% summarize(mean(mpg))
library(dplyr)
plot(x= mtcars$am, mtcars$mpg)
mtcars %>% group_by(factor(am)) %>% summarize(mean(mpg))
boxplot(mtcars$mpg ~ mtcars$am)
library(dplyr)
boxplot(mtcars$mpg ~ mtcars$am,
main="Miles Per Gallon by Transmission Type", xlab="Transmission", ylab="Miles Per Gallon")
mtcars %>% group_by(factor(am)) %>% summarize(mean(mpg))
?mtcars
names.arg=c("Automatic","Manual"))
library(dplyr)
boxplot(mtcars$mpg ~ mtcars$am,
main="Miles Per Gallon by Transmission Type", xlab="Transmission", ylab="Miles Per Gallon",
names.arg=c("Automatic","Manual"))
mtcars %>% group_by(factor(am)) %>% summarize(mean(mpg))
boxplot(mtcars$mpg ~ mtcars$am,
main="Miles Per Gallon by Transmission Type",
xlab="Transmission",
names = c("Male", "Female"),
ylab="Miles Per Gallon")
library(dplyr)
boxplot(mtcars$mpg ~ mtcars$am,
main="Miles Per Gallon by Transmission Type",
xlab="Transmission",
names = c("Automatic", "Manual"),
ylab="Miles Per Gallon")
mtcars %>% group_by(factor(am)) %>% summarize(mean(mpg))
library(dplyr)
mtcars %>% group_by(factor(am)) %>% summarize(mean(mpg), median(mpg))
corr(mtcars)
cor(mtcars)
?mtcars
cor(mtcars)
model1 <- lm(mpg ~ factor(am), data=mtcars)
model1
model1 <- lm(mpg ~ factor(am), data=mtcars)
model2 <- lm(mpg ~ factor(am) + factor(cyl), data=mtcars)
model3 <- lm(mpg ~ factor(am) + factor(cyl) + wt, data=mtcars)
model4 <- lm(mpg ~ factor(am) + factor(cyl) + wt + hp, data=mtcars)
anova(model1, model2, model3, model4)
model4 <- lm(mpg ~ factor(am) + wt + hp + factor(cyl), data=mtcars)
model1 <- lm(mpg ~ factor(am), data=mtcars)
model2 <- lm(mpg ~ factor(am) + wt, data=mtcars)
model3 <- lm(mpg ~ factor(am) + hp + wt, data=mtcars)
model4 <- lm(mpg ~ factor(am) + wt + hp + factor(cyl), data=mtcars)
anova(model1, model2, model3, model4)
model1 <- lm(mpg ~ factor(am), data=mtcars)
model2 <- lm(mpg ~ factor(am) + wt, data=mtcars)
model3 <- lm(mpg ~ factor(am) + hp + wt, data=mtcars)
model4 <- lm(mpg ~ factor(am) + wt + hp + factor(cyl), data=mtcars)
rbind(model1$coefficients, model2$coefficients, model3$coefficients, model4$coefficients)
model1 <- lm(mpg ~ factor(am), data=mtcars)
model2 <- lm(mpg ~ factor(am) + wt, data=mtcars)
model3 <- lm(mpg ~ factor(am) + hp + wt, data=mtcars)
model4 <- lm(mpg ~ factor(am) + wt + hp + factor(cyl), data=mtcars)
rbind(model1$coefficients, model2$coefficients, model3$coefficients, model4$coefficients)
# Chunk 1: cars
library(dplyr)
mtcars %>% group_by(factor(am)) %>% summarize(mean(mpg), median(mpg))
# Chunk 2
model1 <- lm(mpg ~ factor(am), data=mtcars)
model2 <- lm(mpg ~ factor(am) + wt, data=mtcars)
model3 <- lm(mpg ~ factor(am) + hp + wt, data=mtcars)
model4 <- lm(mpg ~ factor(am) + wt + hp + factor(cyl), data=mtcars)
# Chunk 3
summary(model1)
summary(model2)
summary(model3)
summary(model4)
# Chunk 4: plot1
boxplot(mtcars$mpg ~ mtcars$am,
main="Miles Per Gallon by Transmission Type",
xlab="Transmission",
names = c("Automatic", "Manual"),
ylab="Miles Per Gallon")
# Chunk 5: correlation
cor(mtcars)
model1$coefficients
model1$terms
model1$effects
model1
model2$coefficients
summary(model1)
summary(model1)$coefficients
?anova
model4 <- lm(mpg ~ factor(am) + wt + hp + factor(cyl), data=mtcars)
model1 <- lm(mpg ~ factor(am), data=mtcars)
model2 <- lm(mpg ~ factor(am) + wt, data=mtcars)
model3 <- lm(mpg ~ factor(am) + hp + wt, data=mtcars)
model4 <- lm(mpg ~ factor(am) + wt + hp + factor(cyl), data=mtcars)
anova(model1, model2, model3, model4)
model3$residuals
model3$df.residual
plot(model3$residuals, model3$fitted.values)
plot(model3)
par(mfrow = c(2, 2))
plot(model3)
summary(model3)
summary(model1)
summary(model2)
summary(model3)
summary(model4)
summary(model3)
vif(model3)
?vif
install.packages(car)
install.packages("car")
vif(model3)
library(car)
vif(model3)
install.packages("purrr")
mtcars %>% split(.$cyl)
library(dplyr)
library(purrr)
mtcars %>% split(.$cyl)
mtcars %>% split(.$cyl) %>% map(~ lm(mpg ~ wt, data = .))
CO2
CO2 %>% purrr::map_if(is.factor, as.character)
CO2 %>% purrr::map_if(is.factor, as.character) %>% as_data_frame()
?map_if
dat <- CO2 %>% purrr::map_if(is.factor, as.character) %>% as_data_frame()
CO2 %>% tbl_df()
dat %>% tbl_df()
dat
dat %>%
summarise(nuniq_Plant = Plant %>% unique() %>% length()
, nuniq_Type = Type %>% unique() %>% length()
, nuniq_Treatment = Treatment %>% unique() %>% length())
dat[,sapply(dat, class) == "character"]
dat[,sapply(dat, class) == "character"] %>% names()
dat[,sapply(dat, is.character)] %>% names()
Filter(is.character, dat) %>% names()
filter(is.character, dat)
?Filter
?catcolwise
sprintf
?sprintf
sprintf("%f", pi)
sprintf("%.3f", pi)
sprintf("%1.0f", pi)
dat %>%
select_(.dots=e) %>%
distinct() %>%
print()
})
nums <- list(a=c(1,2,3),b=c(2,3,4),c=c(3,4,5))
list.map(nums, c(min=min(.),max=max(.)))
nums <- list(a=c(1,2,3),b=c(2,3,4),c=c(3,4,5))
list.map
install.packages("tibble")
install.packages("tibble")
vignette("tibble")
library(tibble)
l <- replicate(26, sample(100), simplify = FALSE)
names(l) <- letters
l
as_tibble(l)
df1 <- data.frame(x = 1:3, y = 3:1)
df1
class(df1[, 1:2])
df2 <- tibble(x = 1:3, y = 3:1)
class(df2[, 1:2])
df <- data.frame(abc = 1)
df$a
df2 <- tibble(abc = 1)
df2$a
calculate.delta <- function(df, col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
df %>%
mutate_(.dots = setNames(list(calculate_lag), newcolname))
}
calculate.delta(mtcars, wt)
head(mtcars)
calculate.delta(mtcars, "wt")
library(dplyr)
library(purr)
calculate.delta <- function(df, col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
df %>%
mutate_(.dots = setNames(list(calculate_lag), newcolname))
}
calculate.delta(mtcars, "wt")
calculate.delta <- function(col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutate_(.dots = setNames(list(calculate_lag), newcolname))
}
sapply(mtcars, FUN = calculate.delta)
calculate.delta <- function(col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutate_(data = ., .dots = setNames(list(calculate_lag), newcolname))
}
sapply(mtcars, FUN = calculate.delta)
calculate.delta <- function(col, df) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
df %>%
mutate_(.dots = setNames(list(calculate_lag), newcolname))
}
sapply(mtcars, FUN = calculate.delta, df=mtcars)
mapply(calculate.delta, mtcars, df=mtcars)
head(mtcars)
calculate.delta <- function(col, df) {
if (class(df[col]) == c("numeric", "double") {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
df %>%
mutate_(.dots = setNames(list(calculate_lag), newcolname))
}
}
mapply(calculate.delta, mtcars, df=mtcars)
head(mtcars)
?map_at
library(purrr)
calculate.delta <- function(col, df) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
df %>%
mutate_(.dots = setNames(list(calculate_lag), newcolname))
}
vars <- c("mpg", "hp", "wt")
mtcars %>% map_at(.at = vars, .f = calculate.delta, df = .f)
vars <- c("mpg", "hp", "wt")
mtcars %>% map_at(.at = vars, .f = calculate.delta, df = .)
?map-at
?map_at
mtcars %>% map_at(vars, calculate.delta)
mtcars %>% map_at(vars, calculate.delta, df=.)
map_at(.x = mtcars, .at = vars, .f = calculate.delta, df=.)
map_at(.x = mtcars, .at = vars, .f = calculate.delta, df=mtcars)
sapply(vars, FUN = calculate.delta, df = mtcars)
mapply(calculate.delta, vars, MoreArgs = list(df=mtcars))
test <- mapply(calculate.delta, vars, MoreArgs = list(df=mtcars))
test
class(test)
calculate.delta("wt", mtcars)
map_at(mtcars, c("wt", "mpg"), calculate.delta, df = mtcars)
calculate.delta <- function(col, df) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutated <- mutate_(df=., .dots = setNames(list(calculate_lag), newcolname))
mutated
}
mtcars %>% map_at(c("wt", "mpg"), calculate.delta)
calculate.delta <- function(col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutated <- mutate_(df=., .dots = setNames(list(calculate_lag), newcolname))
mutated
}
mtcars %>% map_at(c("wt", "mpg"), calculate.delta)
test <- mtcars %>% map_at(c("wt", "mpg"), calculate.delta, df = .)
test <- mtcars %>% map_at(.at = c("wt", "mpg"), .f = calculate.delta, df = .)
test <- mtcars %>% map_at(.x=., .at = c("wt", "mpg"), .f = calculate.delta, df = .)
?map
test <- mtcars %>% map(calculate.delta)
test <- mtcars %>% map(calculate.delta, df=.)
test <- mtcars %>% map(.f = calculate.delta, df=.)
calculate.delta <- function(col, df) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutated <- mutate_(.dots = setNames(list(calculate_lag), newcolname), df = df)
mutated
}
test <- mtcars %>% map(.f = calculate.delta, df=.)
test <- mtcars %>% map(.x = mtcars.f = calculate.delta, df=.)
test <- mtcars %>% map(.x = mtcars,.f = calculate.delta, df=.)
?map2
test <- mtcars %>% mutate(new = calculate.delta(wt))
library(dplyr)
library(purrr)
calculate.delta <- function(col, df) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutated <- mutate_(.dots = setNames(list(calculate_lag), newcolname), df = df)
mutated
}
test <- mtcars %>% mutate(new = calculate.delta(wt))
calculate.delta <- function(col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutated <- mutate_(.dots = setNames(list(calculate_lag), newcolname), df = df)
mutated
}
calculate.delta <- function(col) {
#generate variable name
newcolname = paste("d", col, sep="")
#get formula for first difference.
calculate_lag <- lazyeval::interp(~(a + lag(a))/a, a = as.name(col))
#pass formula to mutate, name new variable the columname generated above
mutated <- mutate_(.dots = setNames(list(calculate_lag), newcolname), df = .)
mutated
}
test <- mtcars %>% mutate(new = calculate.delta(wt))
col <- mtcars$wt
result <- col + lag(col))/col
col + lag(col))/col
col + col
result <- col + lag(col)/col
result
newcolname = paste("d", col, sep="")
newcolname
mtcars %>% mutate_at(cols, funs(lagged = delta))
delta <- function(x) (x + dplyr::lag(x)) /x
mtcars %>% mutate_at(cols, funs(lagged = delta))
library(dplyr)
library(purrr)
library(dplyr)
delta <- function(x) (x + dplyr::lag(x)) /x
mtcars %>% mutate_at(cols, funs(lagged = delta))
library(dplyr)
delta <- function(x) (x + dplyr::lag(x)) /x
cols <- c("wt", "mpg")
mtcars %>% mutate_at(cols, funs(lagged = delta))
mtcars %>% group_by(cyl) %>% mutate_at(cols, funs(lagged = delta))
test <- mtcars %>% group_by(cyl) %>% mutate_at(cols, funs(lagged = delta))
View(test)
library(dplyr)
delta <- function(x) (x + dplyr::lag(x)) /x
cols <- c("wt", "mpg")
test <- mtcars %>% group_by(cyl) %>% mutate_at(cols, funs(lagged = delta))
test
setwd("H:/Groups/Indian Guidebook Data/")
setwd("H:/Groups/Indian Guidebook Data/")
library(dplyr)
edu <- read.csv("~/educational/boisforte.csv")
setwd("H:/Groups/Indian Guidebook Data/")
getwd()
edu <- read.csv("/educational/boisforte.csv")
?file.path
edu <- read.csv(file.path("educational", "boisforte.csv"))
edu
head(edu)
?read.scv
?read.csv
edu <- read.csv(file.path("educational", "boisforte.csv"), skip = 1, header=TRUE)
edu
names(edu)
?grep
edu <- read.csv(file.path("educational", "boisforte.csv"), skip = 1, header=TRUE) %>%
select(-grepl("Margin.of.Error"))
edu <- read.csv(file.path("educational", "boisforte.csv"), skip = 1, header=TRUE) %>%
select(-grepl(c("Margin.of.Error"))
)
grep("[a-z]", letters)
grepl("blah", "blah blah")
edu <- read.csv(file.path("educational", "boisforte.csv"), skip = 1, header=TRUE) %>%
select(grepl("Margin.of.Error"))
edu <- read.csv(file.path("educational", "boisforte.csv"), skip = 1, header=TRUE) %>%
select(contains("Margin.of.Error"))
edu
names(edu)
edu <- read.csv(file.path("educational", "boisforte.csv"), skip = 1, header=TRUE) %>%
select(-contains("Margin.of.Error"))
head(edu)
empl <- read.csv(file.path("employment", "allreservations.csv"), skip = 1, header=TRUE) %>%
select(-contains("Margin.of.Error"))
empl
empl[,1:5]
?set.names
setnames
gsub(names(empl), ".", "")
gsub(".","",names(empl))
names(empl)
blah <- names(empl)
gsub(".","", blah)
length(gsub(".","", blah))
gsub(".","", "Unemployment.rate..Estimate..PERCENT.IMPUTED...Employment.status.for.population.16.years.and.over")
gsub("\.","", blah)
gsub("[:punct:]","", blah)
blah
gsub("\.", "", "Test.")
gsub(\., "", "Test.")
gsub(".\.", "", "blah")
gsub(\., "", "blah")
gsub("\.", "", "blah")
gsub("[\.]", "", "blah")
gsub("\.", "", "Test.", fixed=TRUE)
gsub("\\.", "", "Test.", fixed=TRUE)
gsub("\\.", "", blah)
empl <- read.csv(file.path("employment", "allreservations.csv"), skip = 1, header=TRUE) %>%
select(-contains("Margin.of.Error")) %>%
setNames(gsub("\\.", "", names(.)))
head(empl)
names(empl)
View(empl)
empl <- read.csv(file.path("employment", "allreservations.csv"), skip = 1, header=TRUE) %>%
select(-contains("Margin.of.Error")) %>%
setNames(gsub("\\.", "", names(.))) %>%
select(Id, Id2, Geography, InlaborforceEstimatePopulation16yearsandover)
empl
empl <- read.csv(file.path("employment", "allreservations.csv"), skip = 1, header=TRUE) %>%
select(-contains("Margin.of.Error")) %>%
setNames(gsub("\\.", "", names(.)))
names(empl)
empl <- read.csv(file.path("employment", "allreservations.csv"), skip = 1, header=TRUE) %>%
select(-contains("Margin.of.Error")) %>%
setNames(gsub("\\.", "", names(.))) %>%
select(Id, Id2, Geography, InlaborforceEstimatePopulation16yearsandover, EmployedEstimatePopulation16yearsandover, UnemploymentrateEstimatePopulation16yearsandover) %>%
setnames(c(Id, Id2, Geography, InLaborForce, EmploymentRate, UnemploymentRate))
empl <- read.csv(file.path("employment", "allreservations.csv"), skip = 1, header=TRUE) %>%
select(-contains("Margin.of.Error")) %>%
setNames(gsub("\\.", "", names(.))) %>%
select(Id, Id2, Geography, InlaborforceEstimatePopulation16yearsandover, EmployedEstimatePopulation16yearsandover, UnemploymentrateEstimatePopulation16yearsandover) %>%
setNames(c(Id, Id2, Geography, InLaborForce, EmploymentRate, UnemploymentRate))
empl <- read.csv(file.path("employment", "allreservations.csv"), skip = 1, header=TRUE) %>%
select(-contains("Margin.of.Error")) %>%
setNames(gsub("\\.", "", names(.))) %>%
select(Id, Id2, Geography, InlaborforceEstimatePopulation16yearsandover, EmployedEstimatePopulation16yearsandover, UnemploymentrateEstimatePopulation16yearsandover) %>%
setNames(c("Id", "Id2", "Geography", "InLaborForce", "EmploymentRate", "UnemploymentRate"))
empl
